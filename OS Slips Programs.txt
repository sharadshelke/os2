******Write a C Menu driven Program to implement following functionality
 a) Accept Available 
b) Display Allocation, Max 
c) Display the contents of need matrix 
d) Display Available

#include <stdio.h>
#include <stdlib.h>

int allocation[20][20], max[20][20], available[20], need[20][20], safe[20], s = 0;
int finish[20], work[20], temp = 0;
int p, r, i, j, flag;

void check() {
    temp = 0;
    s = 0;

    // Calculate Need Matrix
    for (i = 0; i < p; i++)
        for (j = 0; j < r; j++)
            need[i][j] = max[i][j] - allocation[i][j];

    printf("\nAllocation Table:\n");
    for (i = 0; i < p; i++) {
        for (j = 0; j < r; j++)
            printf("%d\t", allocation[i][j]);
        printf("\n");
    }

    printf("\nNeed Table:\n");
    for (i = 0; i < p; i++) {
        for (j = 0; j < r; j++)
            printf("%d\t", need[i][j]);
        printf("\n");
    }

    for (i = 0; i < p; i++)
        finish[i] = 0;

    for (i = 0; i < r; i++)
        work[i] = available[i];

    while (temp < 2) {
        for (i = 0; i < p; i++) {
            flag = 1;
            for (j = 0; j < r; j++) {
                if (finish[i] == 0 && need[i][j] > work[j]) {
                    flag = 0;
                    break;
                }
            }
            if (flag == 1 && finish[i] == 0) {
                for (j = 0; j < r; j++)
                    work[j] += allocation[i][j];
                finish[i] = 1;
                safe[s++] = i;  // Store process ID
            }
        }
        temp++;
    }

    flag = 0;
    for (i = 0; i < p; i++) {
        if (finish[i] == 0) {
            flag = 1;
            break;
        }
    }

    if (flag == 1) {
        printf("\nSystem is in a deadlock state\n");
    } else {
        printf("\nSystem is in a safe state\n");
        printf("\nSafe Sequence: ");
        for (i = 0; i < s; i++)
            printf("P%d ", safe[i]);
        printf("\n");
    }
}

int main() {
    printf("\nBANKER'S ALGORITHM");
    printf("\n\nEnter the number of processes and resources: ");
    scanf("%d %d", &p, &r);

    printf("\nEnter the Allocation Table:\n");
    for (i = 0; i < p; i++)
        for (j = 0; j < r; j++)
            scanf("%d", &allocation[i][j]);

    printf("\nEnter the Max Table:\n");
    for (i = 0; i < p; i++)
        for (j = 0; j < r; j++)
            scanf("%d", &max[i][j]);

    printf("\nEnter the Available Resources:\n");
    for (i = 0; i < r; i++)
        scanf("%d", &available[i]);

    check();
    return 0;
}
******Consider a system with 'm' processes and 'n' resource types. Accept number of instances for every resource type. For each process accept the allocation and maximum requirement matrices. Write a program to display the contents of need matrix and to check if the given request of a process can be granted immediately or not.

#include <stdio.h>
#include <stdlib.h>

int allocation[20][20], max[20][20], available[20], need[20][20], safe[20], s = 0;
int finish[20], work[20], temp = 0;
int p, r, i, j, ch, index, req[20], flag;

void check() {
    temp = 0;
    s = 0;

    // Calculate Need Matrix
    for (i = 0; i < p; i++)
        for (j = 0; j < r; j++)
            need[i][j] = max[i][j] - allocation[i][j];

    printf("\nAllocation Table:\n");
    for (i = 0; i < p; i++) {
        for (j = 0; j < r; j++)
            printf("%d\t", allocation[i][j]);
        printf("\n");
    }

    printf("\nNeed Table:\n");
    for (i = 0; i < p; i++) {
        for (j = 0; j < r; j++)
            printf("%d\t", need[i][j]);
        printf("\n");
    }

    for (i = 0; i < p; i++)
        finish[i] = 0;

    for (i = 0; i < r; i++)
        work[i] = available[i];

    while (temp < 2) {
        for (i = 0; i < p; i++) {
            flag = 1;
            for (j = 0; j < r; j++) {
                if (finish[i] == 0 && need[i][j] > work[j]) {
                    flag = 0;
                    break;
                }
            }
            if (flag == 1 && finish[i] == 0) {
                for (j = 0; j < r; j++)
                    work[j] += allocation[i][j];
                finish[i] = 1;
                safe[s++] = i;  // Store process ID
            }
        }
        temp++;
    }

    flag = 0;
    for (i = 0; i < p; i++) {
        if (finish[i] == 0) {
            flag = 1;
            break;
        }
    }

    if (flag == 1) {
        printf("\nSystem is in a deadlock state\n");
    } else {
        printf("\nSystem is in a safe state\n");
        printf("\nSafe Sequence: ");
        for (i = 0; i < s; i++)
            printf("P%d ", safe[i]);
        printf("\n");
    }
}

int main() {
    printf("\nBANKER'S ALGORITHM");
    printf("\n\nEnter the number of processes and resources: ");
    scanf("%d %d", &p, &r);

    printf("\nEnter the Allocation Table:\n");
    for (i = 0; i < p; i++)
        for (j = 0; j < r; j++)
            scanf("%d", &allocation[i][j]);

    printf("\nEnter the Max Table:\n");
    for (i = 0; i < p; i++)
        for (j = 0; j < r; j++)
            scanf("%d", &max[i][j]);

    printf("\nEnter the Available Resources:\n");
    for (i = 0; i < r; i++)
        scanf("%d", &available[i]);

    printf("\nDo you want to add a new request? (0/1): ");
    scanf("%d", &ch);

    if (ch == 0)
        exit(0);

    printf("\nEnter the process number: ");
    scanf("%d", &index);

    printf("\nEnter the request: ");
    for (i = 0; i < r; i++)
        scanf("%d", &req[i]);

    // Check if request exceeds need
    flag = 1;
    for (i = 0; i < r; i++) {
        if (req[i] > need[index][i]) {
            flag = 0;
            break;
        }
    }

    if (flag == 0) {
        printf("\nRequest cannot be satisfied as it exceeds the need.\n");
        exit(0);
    }

    // Check if request exceeds available resources
    flag = 1;
    for (i = 0; i < r; i++) {
        if (req[i] > available[i]) {
            flag = 0;
            break;
        }
    }

    if (flag == 0) {
        printf("\nRequest cannot be satisfied as resources are not available.\n");
        exit(0);
    }

    // Allocate resources temporarily
    for (i = 0; i < r; i++) {
        allocation[index][i] += req[i];
        available[i] -= req[i];  // Corrected from `==` to `-=`
    }

    check();
    return 0;
}
******Sequential(Contiguous) File Allocation

#include <stdio.h>
#include <stdlib.h>

void main() {
    int f[50], i, st, len, j, c, k, count = 0;

    // Initialize all blocks as free (0)
    for (i = 0; i < 50; i++)
        f[i] = 0;

    printf("Files Allocated are:\n");

    while (1) {
        count = 0;
        printf("\nEnter starting block and length of file: ");
        scanf("%d %d", &st, &len);

        // Check if the required blocks are free
        for (k = st; k < (st + len); k++) {
            if (f[k] == 0)
                count++;
        }

        if (len == count) {
            // Allocate file blocks
            for (j = st; j < (st + len); j++) {
                if (f[j] == 0) {
                    f[j] = 1;
                    printf("%d\t%d\n", j, f[j]);
                }
            }
            printf("The file is allocated to disk\n");
        } else {
            printf("The file is not allocated\n");
        }

        printf("\nDo you want to enter more files? (Yes - 1 / No - 0): ");
        scanf("%d", &c);
        
        if (c == 0)
            exit(0);
    }
}
******Linked File Allocation
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 200

typedef struct dir {
    char fname[20];
    int start;
    struct dir *next;
} NODE;

NODE *first = NULL, *last = NULL;
int n, fb, bit[MAX];

// Function to initialize the disk blocks
void init() {
    int i;
    printf("Enter total number of disk blocks: ");
    scanf("%d", &n);
    fb = n;

    // Initialize all blocks as free (0)
    for (i = 0; i < n; i++)
        bit[i] = 0;

    // Allocate some blocks randomly as occupied (-2)
    for (i = 0; i < 10; i++) {
        int k = rand() % n;
        if (bit[k] != -2) {
            bit[k] = -2;
            fb--;
        }
    }
}

// Function to display the bit vector
void show_bitvector() {
    int i;
    printf("Bit Vector:\n");
    for (i = 0; i < n; i++)
        printf("%d ", bit[i]);
    printf("\n");
}

// Function to display the directory and file allocation
void show_dir() {
    NODE *p;
    int i;
    printf("\nFile\tChain\n");
    p = first;
    while (p != NULL) {
        printf("%s\t", p->fname);
        i = p->start;
        while (i != -1) {
            printf("%d -> ", i);
            i = bit[i];
        }
        printf("NULL\n");
        p = p->next;
    }
}

// Function to create a file
void create() {
    NODE *p;
    char fname[20];
    int i, j, nob, start_block;

    printf("Enter file name: ");
    scanf("%s", fname);
    printf("Enter number of blocks: ");
    scanf("%d", &nob);

    if (nob > fb) {
        printf("Not enough free space! Failed to create file %s\n", fname);
        return;
    }

    // Find the first free block
    for (i = 0; i < n; i++) {
        if (bit[i] == 0) {
            start_block = i;
            break;
        }
    }

    // Create a new file node
    p = (NODE *)malloc(sizeof(NODE));
    strcpy(p->fname, fname);
    p->start = start_block;
    p->next = NULL;

    if (first == NULL)
        first = p;
    else
        last->next = p;
    last = p;

    // Allocate blocks
    int prev = start_block;
    fb -= nob;

    for (j = start_block + 1; j < n && nob > 1; j++) {
        if (bit[j] == 0) {
            bit[prev] = j;
            prev = j;
            nob--;
        }
    }
    bit[prev] = -1; // Mark last block

    printf("File %s created successfully.\n", fname);
}

// Function to delete a file
void delete() {
    char fname[20];
    NODE *p, *q;
    int nob = 0, i, j;

    printf("Enter file name to delete: ");
    scanf("%s", fname);

    p = q = first;

    while (p != NULL) {
        if (strcmp(p->fname, fname) == 0)
            break;
        q = p;
        p = p->next;
    }

    if (p == NULL) {
        printf("File %s not found.\n", fname);
        return;
    }

    // Free allocated blocks
    i = p->start;
    while (i != -1) {
        nob++;
        j = i;
        i = bit[i];
        bit[j] = 0; // Mark block as free
    }
    fb += nob;

    // Remove from linked list
    if (p == first)
        first = first->next;
    else if (p == last) {
        last = q;
        last->next = NULL;
    } else
        q->next = p->next;

    free(p);
    printf("File %s deleted successfully.\n", fname);
}

// Main function to execute the menu-driven program
int main() {
    int ch;
    init();

    while (1) {
        printf("\n1. Show Bit Vector\n");
        printf("2. Create New File\n");
        printf("3. Show Directory\n");
        printf("4. Delete File\n");
        printf("5. Exit\n");
        printf("Enter your choice (1-5): ");
        scanf("%d", &ch);

        switch (ch) {
            case 1:
                show_bitvector();
                break;
            case 2:
                create();
                break;
            case 3:
                show_dir();
                break;
            case 4:
                delete();
                break;
            case 5:
                exit(0);
            default:
                printf("Invalid choice! Try again.\n");
        }
    }

    return 0;
}
******FCFS
#include<stdio.h> 
int main() 
{ 
int i,j,sum=0,n; int 
ar[20],tm[20]; 
int disk; 
printf("enter number of location\t"); scanf("%d",&n); 
printf("enter position of head\t"); scanf("%d",&disk); 
printf("enter elements of disk queue\n"); 
for(i=0;i<n;i++) 
{ 
scanf("%d",&ar[i]); 
tm[i]=disk-ar[i]; 
if(tm[i]<0) 
{ 
tm[i]=ar[i]-disk; 
}
disk=ar[i]; 
sum=sum+tm[i]; 
} 
for(i=0;i<n;i++) 
{ 
printf("\n%d->",tm[i]); 
}
printf("\nmovement of total cylinders %d",sum); return 
0; 
}
******SSTF
#include<stdio.h>
#include<stdlib.h>
int main() 
{ 
int RQ[100],i,n,TotalHeadMoment=0,initial,count=0; 
printf("Enter the number of Requests\n"); 
scanf("%d",&n); 
printf("Enter the Requests sequence\n"); 
for(i=0;i<n;i++) 
scanf("%d",&RQ[i]); 
printf("Enter initial head position\n"); 
scanf("%d",&initial); 
printf("%d- 
",initial);
while(count!=n) 
{ 
int min=1000,d,index; 
for(i=0;i<n;i++) 
{ 
d=abs(RQ[i]-initial); 
if(min>d) 
{ 
min=d; 
} 
} 
index=i; 
TotalHeadMoment=TotalHeadMoment+min; 
initial=RQ[index]; 
printf(" ------ >%d",RQ[index]);  
RQ[index]=1000; 
count++; 
} 
printf("\nTotal head movement is %d",TotalHeadMoment); 
return 0;
}
******SCAN
#include<stdio.h>
#include<stdlib.h>
int main() 
{ 
int RQ[100],i,j,n,TotalHeadMoment=0,initial,size,move; 
printf("Enter the number of Requests\n"); scanf("%d",&n); 
printf("Enter the Requests sequence\n"); 
for(i=0;i<n;i++) 
scanf("%d",&RQ[i]); 
printf("Enter initial head position\n"); 
scanf("%d",&initial);  
printf("Enter 
total disk size\n"); scanf("%d",&size); 
printf("Enter the head movement direction for high 1 and for low 0\n"); 
scanf("%d",&move); 
for(i=0;i<n;i++) 
{ 
for(j=0;j<n-i-1;j++) 
{ 
if(RQ[j]>RQ[j+1]) 
{ 
int temp; 
temp=RQ[j]; 
RQ[j]=RQ[j+1]; 
RQ[j+1]=temp; 
} 
} 
} 
int index; 
for(i=0;i<n;i++) 
{ 
if(initial<RQ[i]) 
{ 
index=i; 
break; 
} 
}
if(move==1) 
{ 
for(i=index;i<n;i++) 
{ 
TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial); 
initial=RQ[i]; 
} 
TotalHeadMoment=TotalHeadMoment+abs(size-RQ[i-1]-1); 
initial = size-1; 
for(i=index-1;i>=0;i--) 
{ 
TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial); 
initial=RQ[i]; 
} 
} 
else 
{ 
for(i=index-1;i>=0;i--) 
{ 
TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial); 
initial=RQ[i]; 
} 
TotalHeadMoment=TotalHeadMoment+abs(RQ[i+1]-0); 
initial =0; 
for(i=index;i<n;i++) 
{ 
TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial); 
initial=RQ[i]; 
} 
} 
printf("Total head movement is %d",TotalHeadMoment); 
return 0; 
}

******C-SCAN
#include<stdio.h>
#include<stdlib.h>
int main() 
{ 
int RQ[100],i,j,n,TotalHeadMoment=0,initial,size,move; 
printf("Enter the number of Requests\n"); scanf("%d",&n); 
printf("Enter the Requests sequence\n"); 
for(i=0;i<n;i++) 
scanf("%d",&RQ[i]); 
printf("Enter initial head position\n"); 
scanf("%d",&initial);  
printf("Enter 
total disk size\n"); scanf("%d",&size); 
printf("Enter the head movement direction for high 1 and for low 0\n"); 
scanf("%d",&move); 
for(i=0;i<n;i++) 
{ 
for( j=0;j<n-i-1;j++) 
{ 
if(RQ[j]>RQ[j+1]) 
{ 
int temp; 
temp=RQ[j]; 
RQ[j]=RQ[j+1]; 
RQ[j+1]=temp; 
} 
} 
} 
int index; 
for(i=0;i<n;i++) 
{ 
if(initial<RQ[i]) 
{ 
index=i; 
break; 
} 
} 
if(move==1) 
{ 
for(i=index;i<n;i++) 
{ 
TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial); 
initial=RQ[i]; 
} 
TotalHeadMoment=TotalHeadMoment+abs(size-RQ[i-1]-1);
TotalHeadMoment=TotalHeadMoment+abs(size-1-0); 
initial=0; 
for( i=0;i<index;i++) 
{ 
TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial); 
initial=RQ[i]; 
} 
} 
else 
{ 
for(i=index-1;i>=0;i--) 
{ 
TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial); 
initial=RQ[i]; 
} 
TotalHeadMoment=TotalHeadMoment+abs(RQ[i+1]-0); 
TotalHeadMoment=TotalHeadMoment+abs(size-1-0); 
initial =size-1; 
for(i=n-1;i>=index;i--) 
{ 
TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial); 
initial=RQ[i]; 
} 
} 
printf("Total head movement is %d",TotalHeadMoment); 
return 0; 
}
